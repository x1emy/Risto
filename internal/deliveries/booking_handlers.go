package deliveries

import (
	"booking-service/internal/services"
	"encoding/json"
	"github.com/gorilla/mux"
	"log"
	"net/http"
)

func RegisterBookingHandlers(r *mux.Router, bookingService *services.BookingService) {
	// üîì –ü—É–±–ª–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	r.HandleFunc("/api/tables", func(w http.ResponseWriter, r *http.Request) {
		tables, err := bookingService.GetAvailableTables()
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–ª–∏–∫–æ–≤:", err)
			http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		if err := json.NewEncoder(w).Encode(tables); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
			http.Error(w, "–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞", http.StatusInternalServerError)
		}
	}).Methods("GET")

	// üîê –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
	r.HandleFunc("/tables", func(w http.ResponseWriter, r *http.Request) {
		_, err := services.CheckAuth(r)
		if err != nil {
			http.Error(w, "Unauthorized", http.StatusUnauthorized)
			return
		}

		tables, err := bookingService.GetAvailableTables()
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤:", err)
			http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", http.StatusInternalServerError)
			return
		}

		if len(tables) == 0 {
			log.Println("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤")
			http.Error(w, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤", http.StatusNotFound)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		if err := json.NewEncoder(w).Encode(tables); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:", err)
			http.Error(w, "–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞", http.StatusInternalServerError)
		}
	}).Methods("GET")

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	r.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–æ–≤!"))
	}).Methods("GET")

	// POST /booking ‚Äî –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
	r.HandleFunc("/booking", func(w http.ResponseWriter, r *http.Request) {
		var booking struct {
			TableID     int    `json:"table_id"`
			GuestName   string `json:"guest_name"`
			BookingTime string `json:"booking_time"`
		}

		if err := json.NewDecoder(r.Body).Decode(&booking); err != nil {
			http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", http.StatusBadRequest)
			return
		}

		err := bookingService.BookTable(booking.TableID, booking.GuestName, booking.BookingTime)
		if err != nil {
			http.Error(w, "–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", http.StatusInternalServerError)
			return
		}

		w.WriteHeader(http.StatusOK)
	}).Methods("POST")
}
